import subprocess
import os    
import matplotlib.pyplot as plt
import numpy as np

def run_makefile(total_nodes=100, ttx_time=5000, blk_time=600000, blk_limit=100, 
                 timeout=100000, eclipse=0, malicious=0.6):
    cmd = [
        "make", "run", "-j8", "-e",
        f"TOTAL_NODES={total_nodes}",
        f"TTX_TIME={ttx_time}",
        f"BLK_TIME={blk_time}",
        f"BLK_LIMIT={blk_limit}",
        f"TIMEOUT={timeout}",
        f"ECLIPSE={eclipse}",
        f"MALICIOUS={malicious}",
        f"GEN_GRAPHS=0"
    ]

    try:
        print(f"Running command: {' '.join(cmd)}")
        result = subprocess.run(cmd, check=True)
        print("Makefile executed successfully")
        return result.returncode
    except subprocess.CalledProcessError as e:
        print(f"Error executing Makefile: {e}")
        return e.returncode


def parse_miner_stats(log_file_path):
    """
    Parse the statistics from a miner log file.
    
    Args:
        log_file_path: Path to the miner log file
        
    Returns:
        dict: Dictionary containing the extracted statistics
    """
    stats = {"is_malicious": True}
    
    try:
        with open(log_file_path, 'r') as file:
            lines = file.readlines()
            
            # Extract statistics from the last few lines of the file
            for i in range(len(lines) - 6, len(lines)):
                line = lines[i].strip()

                if "Honest" in line:
                    stats["is_malicious"] = False
                elif "Total Blocks Generated" in line:
                    stats["total_blocks_generated"] = int(line.split(": ")[1])
                elif "Total Blocks in Main Chain" in line:
                    stats["blocks_in_main_chain"] = int(line.split(": ")[1])
                elif "Ratio of blocks in Main Chain to total blocks in Main Chain" in line:
                    value = line.split(": ")[1]
                    stats["ratio_blocks_to_total_main_chain"] = float(value) if value != "-1" else 0
                elif "Ratio of blocks in Main Chain to total blocks generated by miner" in line:
                    value = line.split(": ")[1]
                    stats["ratio_blocks_to_generated"] = float(value) if value != "-1" else 0
                elif "Average Branch Length" in line:
                    stats["avg_branch_length"] = float(line.split(": ")[1])
                    
        return stats
    except Exception as e:
        print(f"Error parsing miner log file {log_file_path}: {e}")
        return None
    
def ratio_of_longest_chain_vs_total_blocks_in_longest_chain(total_nodes=100, ttx_time=5000, blk_time=600000, blk_limit=100, 
                timeout=100000, iters = 10):
    malicious_fractions = [(5 * i)/100 for i in range(1, 21)]
    ratio_blocks_to_total_main_chain = [ [0 for malicious in range(20)] for eclipse in range(2) ]
    ratio_blocks_to_generated = [ [0 for malicious in range(20)] for eclipse in range(2) ]
    for eclipse in [0, 1]:
        for malicious in malicious_fractions:
            for _ in range(iters):
                run_makefile(total_nodes, ttx_time, blk_time, blk_limit, 
                         timeout, eclipse, malicious)
                stats = parse_miner_stats("logs/miner-0.log")
                ratio_blocks_to_total_main_chain[eclipse][int(malicious * 20) - 1] += stats["ratio_blocks_to_total_main_chain"]
                ratio_blocks_to_generated[eclipse][int(malicious * 20) - 1] += stats["ratio_blocks_to_generated"]

    # Convert malicious_fractions to a numpy array for plotting
    malicious_fractions = np.array(malicious_fractions)

    # Calculate the average ratios
    ratio_blocks_to_total_main_chain = np.array(ratio_blocks_to_total_main_chain) / iters
    ratio_blocks_to_generated = np.array(ratio_blocks_to_generated) / iters

    # Plot ratio of blocks in longest chain to total blocks in longest chain
    plt.figure(figsize=(10, 6))
    for eclipse in [0, 1]:
        plt.plot(malicious_fractions, ratio_blocks_to_total_main_chain[eclipse], label=f'Eclipse {eclipse}')
    plt.xlabel('Malicious Fraction')
    plt.ylabel('Ratio of Blocks in Longest Chain to Total Blocks in Longest Chain')
    plt.title('Ratio of Blocks in Longest Chain to Total Blocks in Longest Chain vs Malicious Fraction')
    plt.legend()
    plt.grid(True)
    plt.savefig(f'ratio_blocks_to_total_main_chain_ttx_{ttx_time}_I_{blk_time}_timeout_{timeout}.png')
    plt.close()

    # Plot ratio of blocks in longest chain to total blocks generated by miner
    plt.figure(figsize=(10, 6))
    for eclipse in [0, 1]:
        plt.plot(malicious_fractions, ratio_blocks_to_generated[eclipse], label=f'Eclipse {eclipse}')
    plt.xlabel('Malicious Fraction')
    plt.ylabel('Ratio of Blocks in Longest Chain to Total Blocks Generated by Miner')
    plt.title('Ratio of Blocks in Longest Chain to Total Blocks Generated by Miner vs Malicious Fraction')
    plt.legend()
    plt.grid(True)
    plt.savefig(f'ratio_blocks_to_generated_ttx_{ttx_time}_I_{blk_time}_timeout_{timeout}.png')
    plt.close()

if __name__ == "__main__":
    ratio_of_longest_chain_vs_total_blocks_in_longest_chain()
